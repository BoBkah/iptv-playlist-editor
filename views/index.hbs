<html>
    <head>
        <meta charset="utf-8">
        <title>IPTV playlist editor</title>
        <!-- <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous"> -->
        <link rel="stylesheet" href="/lib/bootstrap.min.css">
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.12.1/css/all.min.css" integrity="sha256-mmgLkCYLUQbXn0B1SRqzHar6dCnv9oZFPEC1g1cwlkk=" crossorigin="anonymous" />
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-toast.js@1.0.8/css/bootstrap-toast.min.css" integrity="sha256-brHFMMl0+rWPVzFXXH2wQfh+ce9bAtzOFkZ848v6iUs=" crossorigin="anonymous">
        <style>
            .content {
                padding-top: 20px;
            }
            #overlay {
                display: none;
                position: fixed;
                width: 100%;
                height: 100%;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background-color: rgba(60, 138, 255, 0.2);
                z-index: 2;
                cursor: progress;
            }
            #overlay div {
                position: absolute;
                top: 50%;
                left: 50%;
            }
            #providerStream button {
                width: 100%;
            }
            #providerStream div.list-group-item {
                -webkit-touch-callout: none;
                -webkit-user-select: none;
                -khtml-user-select: none;
                -moz-user-select: none;
                -ms-user-select: none;
                user-select: none;
            }
            i {
                cursor: pointer;
            }
            i.fa-arrows-alt {
                cursor: move;
            }
            .card {
                margin-bottom: 20px;
            }
            .card-body {
                padding: 0;
                padding-bottom: 0;
                background-position: center;
                background-repeat: no-repeat;
                background-size: contain;
                max-height: 4rem;
            }
            .card-title {
                display: table-cell;
                height: 4rem;
                width: 300px;
                background: rgba(255, 255, 255, 0.9);
            }
            .card-title span {
                line-height: 4rem;
            }
            .card-footer i {
                margin-right: 0.25rem;
            }
            .list-group-item {
                padding-left: 0.5em;
            }

            .tooltip.show p {
                text-align:left;
            }
            .tooltip-inner {
                max-width: 350px;
            }
            h5>small>i:first-child {
                margin-left: 0.75rem;
            }
            h5>small i {
                margin-right: 0.2rem;
            }
        </style>
    </head>
    <body>
        <div class="d-flex flex-column flex-md-row align-items-center p-3 px-md-4 mb-3 border-bottom bg-primary shadow-sm text-light">
            <h5 class="my-0 mr-md-auto font-weight-normal ">IPTV playlist editor</h5>
            <nav class="my-2 my-md-0 mr-md-3 nav">
                <a class="nav-link p-2 text-light" id="nav-playlist" href="#playlist">Playlist</a>
                <a class="nav-link p-2 text-light" id="nav-epg" href="#epg">{{{__ "EPG"}}}</a>
            </nav>
            <a class="nav-link p-2 text-light" href="https://github.com/BoBkah/iptv-playlist-editor" target="_blank"><i class="fab fa-github"></i></a>
        </div>
        <div class="container-fluid content" id="page"></div>    
        
        <!-- Overlay spinner -->
        <div id="overlay">
            <div class="spinner-border" role="status">
                <span class="sr-only">{{{__ "Loading..."}}}</span>
            </div>
        </div>
        <!-- Modal -->
        <div class="modal" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content"></div>
            </div>
          </div>
        <script src="https://code.jquery.com/jquery-3.4.1.min.js" integrity="sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=" crossorigin="anonymous"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
        <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.7.3/handlebars.min.js" integrity="sha256-/PJBs6QWvXijOFIX04kZpLb6ZtSQckdOIavLWKKOgXU=" crossorigin="anonymous"></script>
        <script src="https://SortableJS.github.io/Sortable/Sortable.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/bootbox.js/5.4.0/bootbox.min.js"></script>
        <script src="https://cdn.jsdelivr.net/gh/xcash/bootstrap-autocomplete@v2.3.4/dist/latest/bootstrap-autocomplete.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.25.3/moment.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap-toast.js@1.0.8/js/bootstrap-toast.min.js" integrity="sha256-xAVWHb2y3Yii6cfnGu69a9iMSxYdGduWX2hu3gHJK1g=" crossorigin="anonymous"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.mask/1.14.16/jquery.mask.min.js" integrity="sha256-Kg2zTcFO9LXOc7IwcBx1YeUBJmekycsnTsq2RuFHSZU=" crossorigin="anonymous"></script>
        <script>
            Handlebars.registerHelper('isSelected', function (optionValue, selectedValue) {
                if (Array.isArray(selectedValue)) {
                   for (let arrayIndex in selectedValue) {
                       if (selectedValue[arrayIndex].id == optionValue) {
                           return 'selected'
                       }
                   }
                   return ''
                } else {
                    return optionValue == selectedValue ? 'selected' : ''
                }
            })
            Handlebars.registerHelper('isChecked', function (optionValue, selectedValue) {
                if (Array.isArray(selectedValue)) {
                   for (let arrayIndex in selectedValue) {
                       if (selectedValue[arrayIndex].id == optionValue) {
                           return 'checked'
                       }
                   }
                   return ''
                } else {
                    return optionValue == selectedValue ? 'checked' : ''
                }
            })
            Handlebars.registerHelper('getPriority', function (id, list) {
                if (Array.isArray(list)) {
                    for (let arrayIndex in list) {
                        if (list[arrayIndex].id == id) {
                            return list[arrayIndex].PlaylistLiveEpg.priority
                        }
                    }
                    return 0
                } else {
                    return 0
                }
            })
            var getUrl = window.location;
            var baseUrl = getUrl .protocol + "//" + getUrl.host;
            // Disable enter key
            $(document).keypress(function (e) {
                if (e.which === 13) {
                    e.preventDefault()
                    return
                }
            })
            $(document).ready(function () {
                setToastPosition(TOAST_POSITION.BOTTOM_RIGHT)
                // Provider
                var providerList = []
                const providerUpdate = function (providerId) {
                    $('#providerPanel').hide()
                    axios.get('/manager/api/provider', {
                        responseType: 'json'
                    }).then(function (providers) {
                        if (providers.data.length === 0) {
                            providerModalAdd()
                        }
                        providerList = providers.data
                        let template = Handlebars.compile($('#providerList-template').html())
                        let html = template({
                            provider: providers.data,
                            providerSelected: providerId
                        })
                        $('#providerPanel').html(html)
                        $('#providerPanel').show()
                        $('#providerAdd').on('click', function () {
                            providerModalAdd()
                        })
                        $('#providerEdit').on('click', function () {
                            let template = Handlebars.compile($('#providerModalEdit-template').html())
                            // Get provider infos
                            axios.get('/manager/api/provider/' + $('#providerList option:selected').val(), {
                                responseType: 'json'
                            }).then(function (providerInfos) {
                                let html = template({
                                    provider: providerInfos.data
                                })
                                $('div.modal div.modal-content').html(html)
                                $('div.modal').modal()
                                $('#providerSaveButton').on('click', function () {
                                    providerSave()
                                })
                            })
                        })
                        if (providers.data.length > 0) {
                            // Get category list
                            $('#providerList').on('change', function() {
                                providerCategoryUpdate()
                            })
                            $('#providerSync').on('click', function() {
                                providerSynchronize()
                            })
                            providerCategoryUpdate()
                        }
                        $('#providerDelete').on('click', function () {
                            bootbox.confirm('Please confirm deletion of ' + $('#providerList option:selected').text() + ' provider', function (result) {
                                if (result === true) {
                                    axios.delete('/manager/api/provider/' + $('#providerList option:selected').val()).then(function () {
                                        providerUpdate()
                                    })
                                }
                            })
                        })
                    })
                }
                const providerCategoryUpdate = function() {
                    $('#providerCategoryPanel').hide()
                    $('#providerStreamPanel').hide()
                    axios.get('/manager/api/provider/' + $('#providerList option:selected').val() + '/live/category', {
                        responseType: 'json'
                    }).then(function (providerCategory) {
                        let template = Handlebars.compile($('#providerCategory-template').html())
                        let html = template({
                            category: providerCategory.data
                        })
                        $('#providerCategoryPanel').html(html)
                        $('#providerCategoryPanel').show()
                        if (providerCategory.data.length > 0) {
                            $('#providerCategory').on('change', function (element) {
                                providerStreamUpdate()
                            })
                            providerStreamUpdate()
                        }
                    })
                }
                const providerStreamUpdate = function() {
                    $('#providerStreamPanel').hide()
                    axios.get('/manager/api/provider/' + $('#providerList option:selected').val() + '/live/category/' + $('#providerCategory option:selected').val(), {
                        responseType: 'json'
                    }).then(function (stream) {
                        let template = Handlebars.compile($('#providerStream-template').html())
                        let html = template({
                            stream: stream.data
                        })
                        $('#providerStreamPanel').html(html)
                        $('#providerStreamPanel').show()
                        if (stream.data.length > 0) {
                            $('#providerStreamFilter').on('keyup', function () {
                                let value = $(this).val().toLowerCase()
                                $('#providerStream div.list-group-item').filter(function () {
                                    $(this).toggle($(this).children('#name').text().toLowerCase().indexOf(value) > -1)
                                })
                            })
                        }
                        // Add provider stream to current playlist category
                        $('#providerStream div').on('dblclick', function () {
                            let that = this
                            let categoryId = $('#playlistCategoryList div.active').attr('category-id')
                            if (categoryId !== undefined) {
                                axios.post('/manager/api/playlist/live/' + $('#playlistList option:selected').val() + ':playlistLiveId/category/' + categoryId + '/stream', {
                                    streamId: $(that).attr('stream-id')
                                }).then(function () {
                                    $(that).fadeOut(150).fadeIn(150)
                                    playlistStreamUpdate()
                                })
                            }
                        })
                        // Add event to copy button
                        $('#copyLiveStreamToPlaylistCategory').on('click', function () {
                            bootbox.confirm('<p>Do you want to copy all current provider category streams to category:</p><p class="text-center"><strong>' + $('#playlistCategoryList div.active').text() + '</strong></p>', async function (result) {
                                if (result) {
                                    $('#overlay').show()
                                    let streamCopied = 0
                                    for (let streamIndex in stream.data) {
                                        let categoryId = $('#playlistCategoryList div.active').attr('category-id')
                                        if (categoryId !== undefined) {
                                            await axios.post('/manager/api/playlist/live/' + $('#playlistList option:selected').val() + ':playlistLiveId/category/' + categoryId + '/stream', {
                                                streamId: stream.data[streamIndex].id
                                            })
                                            streamCopied++
                                        }
                                    }
                                    $('#overlay').hide()
                                    bootbox.alert(streamCopied + ' stream(s) copied')
                                    playlistStreamUpdate()
                                }
                            })
                        })
                    })
                }
                const providerSynchronize = function(providerId) {
                    if (providerId === undefined) {
                        providerId = $('#providerList option:selected').val()
                    }
                    $('#overlay').show()
                    axios.get('/manager/api/provider/' + providerId + '/sync').then(function () {
                        $('#overlay').hide()
                        providerCategoryUpdate()
                    })
                }
                const providerModalAdd = function () {
                    let template = Handlebars.compile($('#providerModalAdd-template').html())
                    let html = template()
                    $('div.modal div.modal-content').html(html)
                    $('div.modal').modal()
                    $('#providerAddButton').on('click', function () {
                        providerAdd()
                    })
                }
                const providerAdd = function() {
                    let data = {
                        name: $('div.modal input[name=providerName]').val(),
                        host: $('div.modal input[name=providerHost]').val(),
                        port: $('div.modal input[name=providerPort]').val(),
                        username: $('div.modal input[name=providerUsername]').val(),
                        password: $('div.modal input[name=providerPassword]').val()
                    }
                    axios.post('/manager/api/provider', data).then(function (result) {
                        if (result.data.hasOwnProperty('providerId')) {
                            providerUpdate(result.data.providerId)
                            providerSynchronize(result.data.providerId)
                        }
                        $('div.modal').modal('hide')
                        // Update EPG list
                        epgUpdate()
                    })
                }
                const providerSave = function() {
                    let data = {
                        name: $('div.modal input[name=providerName]').val(),
                        host: $('div.modal input[name=providerHost]').val(),
                        port: $('div.modal input[name=providerPort]').val(),
                        username: $('div.modal input[name=providerUsername]').val(),
                        password: $('div.modal input[name=providerPassword]').val()
                    }
                    axios.put('/manager/api/provider/' + $('#providerList option:selected').val(), data).then(function () {
                        providerUpdate()
                        $('div.modal').modal('hide')
                    })
                }
                // Playlist
                const playlistUpdate = function(playlistSelected) {
                    // Hide playlist category and stream
                    $('#playlistCategoryPanel').hide()
                    $('#playlistStreamPanel').hide()
                    // Get playlist list
                    $('#playlistPanel').hide()
                    axios.get('/manager/api/playlist/live', {
                        responseType: 'json'
                    }).then(function (playlist) {
                        let template = Handlebars.compile($('#playlistList-template').html())
                        let html = template({
                            playlist: playlist.data,
                            playlistSelected: playlistSelected
                        })
                        $('#playlistPanel').html(html)
                        $('#playlistPanel').show()
                        $('#playlistAdd').on('click', function () {
                                let template = Handlebars.compile($('#playlistModalAdd-template').html())
                                let html = template({
                                    epg: epgList
                                })
                                $('div.modal div.modal-content').html(html)
                                $('div.modal').modal()
                                $('#playlistAddButton').on('click', function () {
                                    playlistAdd()
                                })
                                $('#playlistEditButton').on('click', function() {
                                    playlistEdit()
                                })
                            })
                        $('#playlistEdit').on('click', function () {
                            let template = Handlebars.compile($('#playlistModalEdit-template').html())
                            // Get playlist infos
                            axios.get('/manager/api/playlist/live/' + $('#playlistList option:selected').val(), {
                                responseType: 'json'
                            }).then(function (playlistInfos) {
                                let html = template({
                                    playlist: playlistInfos.data,
                                    epg: epgList
                                })
                                $('div.modal div.modal-content').html(html)
                                $('div.modal').modal()
                                $('#playlistSaveButton').on('click', function () {
                                    playlistSave()
                                })
                            })
                        })
                        if (playlist.data.length > 0) {
                            $('#playlistList').on('change', function () {
                                playlistCategoryUpdate()
                            })
                            $('#playlistDelete').on('click', function () {
                                bootbox.confirm('Please confirm deletion of ' + $('#playlistList option:selected').text() + ' playlist', function (result) {
                                    if (result === true) {
                                        axios.delete('/manager/api/playlist/live/' + $('#playlistList option:selected').val()).then(function () {
                                            playlistUpdate()
                                        })
                                    }
                                })                               
                            })
                            $('#playlistInfo').on('click', function () {
                                let template = Handlebars.compile($('#playlistModalInfos-template').html())
                                // Get playlist infos
                                axios.get('/manager/api/playlist/live/' + $('#playlistList option:selected').val(), {
                                    responseType: 'json'
                                }).then(function (playlistInfos) {
                                    let html = template({
                                        playlist: playlistInfos.data,
                                        baseUrl: baseUrl
                                    })
                                    $('div.modal div.modal-content').html(html)
                                    $('div.modal').modal()
                                })
                            })
                            playlistCategoryUpdate()
                        }
                    })
                }
                const playlistCategoryUpdate = function (categoryId = null) {
                    $('#playlistCategoryPanel').hide()
                    $('#playlistStreamPanel').hide()
                    axios.get('/manager/api/playlist/live/' + $('#playlistList option:selected').val() + '/category', {
                        responseType: 'json'
                    }).then(function (playlistCategory) {
                        if (categoryId !== null) {
                            for (let index in playlistCategory.data) {
                                if (playlistCategory.data[index].id == categoryId) {
                                    playlistCategory.data[index].active = true
                                }
                            }
                        }
                        let template = Handlebars.compile($('#playlistCategory-template').html())
                        let html = template({
                            category: playlistCategory.data
                        })
                        $('#playlistCategoryPanel').html(html)
                        $('#playlistCategoryPanel').show()
                        $('#playlistCategoryAdd').on('click', function () {
                            let template = Handlebars.compile($('#playlistCategoryModalAdd-template').html())
                                let html = template()
                                $('div.modal div.modal-content').html(html)
                                $('div.modal').modal()
                                /*
                                $('div.modal').keypress(function (e) {
                                    if (e.which === 13) {
                                        e.preventDefault()
                                        playlistCategoryAdd()
                                    }
                                })
                                */
                                $('#playlistCategoryAddButton').on('click', function () {
                                    playlistCategoryAdd()
                                })
                        })
                        $('#playlistCategoryAction').hide()
                        if (playlistCategory.data.length > 0) {
                            $('#playlistCategoryAction').show()
                            $('#playlistCategoryEdit').on('click', function () {
                                let template = Handlebars.compile($('#playlistCategoryModalEdit-template').html())
                                // Get provider infos
                                axios.get('/manager/api/playlist/live/' + $('#playlistList option:selected').val() + '/category/' + $('#playlistCategoryList div.active').attr('category-id'), {
                                    responseType: 'json'
                                }).then(function (playlistCategory) {
                                    let html = template({
                                        playlistCategory: playlistCategory.data
                                    })
                                    $('div.modal div.modal-content').html(html)
                                    $('div.modal').modal()
                                    $('div.modal').keypress(function (e) {
                                        if (e.which === 13) {
                                            e.preventDefault()
                                            playlistCategorySave()
                                        }
                                    })
                                    $('#playlistCategorySaveButton').on('click', function () {
                                        playlistCategorySave()
                                    })
                                })
                            })
                            $('#playlistCategoryDelete').on('click', function () {
                                bootbox.confirm('Please confirm deletion of playlist category ' + $('#playlistCategoryList div.active').text(), function (result) {
                                    if (result === true) {
                                        axios.delete('/manager/api/playlist/live/' + $('#playlistList option:selected').val() + '/category/' + $('#playlistCategoryList div.active').attr('category-id')).then(function () {
                                            playlistCategoryUpdate()
                                        })
                                    }
                                })
                            })
                            // Enable sort
                            Sortable.create(playlistCategoryList, {
                                handle: '.fa-arrows-alt',
                                animation: 150,
                                onEnd: function (event) {
                                    axios.put('/manager/api/playlist/live/' + $('#playlistList option:selected').val() + '/category/' + $(event.item).attr('category-id'), { position: event.newIndex+1 }).then(function () {
                                        // playlistCategoryUpdate($('#playlistCategoryList div.active').attr('category-id'))
                                    })
                                }
                            })
                            // Activate first category
                            $('#playlistCategoryList div').first().addClass('active')
                            $('#playlistCategoryList').on('click', function (element) {
                                $('#playlistCategoryList div').removeClass('active')
                                $(element.target).addClass('active')
                                playlistStreamUpdate()
                            })
                            playlistStreamUpdate()
                            
                        }
                    })
                }
                let playlistStreamStyle = ''
                const playlistStreamUpdate = function () {
                    $('#playlistStreamPanel').hide()
                    axios.get('/manager/api/playlist/live/' + $('#playlistList option:selected').val() + '/category/' + $('#playlistCategoryList div.active').attr('category-id') + '/stream', {
                        responseType: 'json'
                    }).then(function (playlistStream) {
                        let template = Handlebars.compile($('#playlistStream' + ((playlistStreamStyle !== '') ? '-' + playlistStreamStyle : '') + '-template').html())
                        let html = template({
                            stream: playlistStream.data
                        })
                        $('#playlistStreamPanel').html(html)
                        $('#playlistStreamPanel').show()
                        $('#playlistStreamStyleToogle').click(function () {
                            if (playlistStreamStyle === '') {
                                playlistStreamStyle = 'inline'
                            } else {
                                playlistStreamStyle = ''
                            }
                            console.log(playlistStreamStyle)
                            playlistStreamUpdate()
                        })
                        if (playlistStream.data.length > 0) {
                            // Enable tooltips
                            $('[data-toggle="tooltip"]').tooltip()
                            // Enable Sortable
                            Sortable.create(playlistStreamList, {
                                handle: '.fa-arrows-alt',
                                animation: 150,
                                onEnd: function (event) {
                                    axios.put('/manager/api/playlist/live/' + $('#playlistList option:selected').val() + '/category/' + $('#playlistCategoryList div.active').attr('category-id') + '/stream/' + $(event.item).attr('stream-id'), { position: event.newIndex + 1 }).then(function () {
                                        playlistStreamUpdate()
                                    })
                                }
                            })
                            $('.playlistStreamDelete').on('click', function () {
                                let streamId = $(this).attr('stream-id')
                                bootbox.confirm('Please confirm deletion this stream', function (result) {
                                    if (result === true) {
                                        axios.delete('/manager/api/playlist/live/' + $('#playlistList option:selected').val() + '/category/' + $('#playlistCategoryList div.active').attr('category-id') + '/stream/' + streamId).then(function () {
                                            playlistStreamUpdate()
                                        })
                                    }
                                })
                            })
                            $('.playlistStreamEdit').on('click', function () {
                                let template = Handlebars.compile($('#playlistStreamModalEdit-template').html())
                                // Get provider infos
                                axios.get('/manager/api/playlist/live/' + $('#playlistList option:selected').val() + '/category/' + $('#playlistCategoryList div.active').attr('category-id') + '/stream/' +  $(this).attr('stream-id'), {
                                    responseType: 'json'
                                }).then(function (playlistStreamInfos) {
                                    let html = template({
                                        playlistStream: playlistStreamInfos.data
                                    })
                                    $('div.modal div.modal-content').html(html)
                                    $('div.modal').modal()
                                    $('#playlistStreamSaveButton').on('click', function () {
                                        playlistStreamSave()
                                    })
                                })
                            })
                            $('#playlistStreamRename').on('click', function () {
                                let template = Handlebars.compile($('#playlistStreamModalRename-template').html())
                                let html = template()
                                $('div.modal div.modal-content').html(html)
                                $('div.modal').modal()
                                $('input[name=playlistStreamRenameSearch]').on('keyup', function () {
                                    previewResult()
                                })
                                $('input[name=playlistStreamRenameReplace]').on('keyup', function () {
                                    previewResult()
                                })
                                $('#playlistStreamRenameSaveButton').on('click', async function () {
                                    for (let streamIndex in playlistStream.data) {
                                        let data = {
                                            name: playlistStream.data[streamIndex].name.replace($('input[name=playlistStreamRenameSearch]').val(), $('input[name=playlistStreamRenameReplace]').val())
                                        }
                                        await axios.put('/manager/api/playlist/live/' + $('#playlistList option:selected').val() + '/category/' + $('#playlistCategoryList div.active').attr('category-id') + '/stream/' + playlistStream.data[streamIndex].id, data)
                                    }
                                    playlistStreamUpdate()
                                    $('div.modal').modal('hide')
                                })
                                previewResult()
                            })
                            let previewResult = function () {
                                let result = []
                                for (let streamIndex in playlistStream.data) {
                                    result.push(playlistStream.data[streamIndex].name.replace($('input[name=playlistStreamRenameSearch]').val(), $('input[name=playlistStreamRenameReplace]').val()))
                                }
                                $('textarea[name=playlistStreamRenameResult]').val(result.join('\n'))
                            }
                            if (playlistStreamStyle === 'inline') {
                                $('#playlistStreamList input[name=epgid]').autoComplete({
                                    events: {
                                        search: function (query, callback, element) {
                                            axios.get('/manager/api/epg/channel/' + query).then(function (result) {
                                                callback(result.data)
                                            })
                                        }
                                    }
                                })
                                $('#playlistStreamList input[name=epgid]').on('autocomplete.select', function (e) {
                                    axios.put('/manager/api/playlist/live/' + $('#playlistList option:selected').val() + '/category/' + $('#playlistCategoryList div.active').attr('category-id') + '/stream/' + $(this).attr('stream-id'), { epgChannelId: $(this).val() })
                                })
                                $('#playlistStreamList input[name=name]').on('keyup', function (e) {
                                    axios.put('/manager/api/playlist/live/' + $('#playlistList option:selected').val() + '/category/' + $('#playlistCategoryList div.active').attr('category-id') + '/stream/' + $(this).attr('stream-id'), { name: $(this).val() })
                                })
                                $('#playlistStreamList input[name=icon]').on('keyup', function (e) {
                                    axios.put('/manager/api/playlist/live/' + $('#playlistList option:selected').val() + '/category/' + $('#playlistCategoryList div.active').attr('category-id') + '/stream/' + $(this).attr('stream-id'), { icon: $(this).val() })
                                })
                            }
                        }
                    })
                }
                const playlistAdd = function () {
                    let data = {
                        name: $('div.modal input[name=playlistName]').val(),
                        password: $('div.modal input[name=playlistPassword]').val(),
                    }
                    let epgSelected = []
                    $('div.modal table input[type=checkbox]').each(function () {
                        if ($(this).is(':checked')) {
                            console.log($(this).val())
                            epgSelected.push({
                                id: $(this).val(),
                                priority: $('#priority' + $(this).val()).val()
                            })
                        }
                    })
                    data.epg = epgSelected
                    axios.post('/manager/api/playlist/live', data).then(function () {
                        playlistUpdate()
                        $('div.modal').modal('hide')
                    })
                }
                const playlistSave = function () {
                    let data = {
                        name: $('div.modal input[name=playlistName]').val(),
                        password: $('div.modal input[name=playlistPassword]').val(),
                    }
                    let epgSelected = []
                    $('div.modal table input[type=checkbox]').each(function () {
                        if ($(this).is(':checked')) {
                            console.log($(this).val())
                            epgSelected.push({
                                id: $(this).val(),
                                priority: $('#priority' + $(this).val()).val()
                            })
                        }
                    })
                    data.epg = epgSelected
                    axios.put('/manager/api/playlist/live/' + $('#playlistList option:selected').val(), data).then(function () {
                        playlistUpdate($('#playlistList option:selected').val())
                        $('div.modal').modal('hide')
                    })
                }
                const playlistCategoryAdd = function () {
                    let data = {
                        name: $('div.modal input[name=playlistCategoryName]').val(),
                    }
                    axios.post('/manager/api/playlist/live/' + $('#playlistList option:selected').val() + '/category', data).then(function () {
                        playlistCategoryUpdate()
                        $('div.modal').modal('hide')
                    })
                }
                const playlistCategorySave = function () {
                    let data = {
                        name: $('div.modal input[name=playlistCategoryName]').val()
                    }
                    axios.put('/manager/api/playlist/live/' + $('#playlistList option:selected').val() + '/category/' + $('#playlistCategoryList div.active').attr('category-id'), data).then(function () {
                        playlistCategoryUpdate()
                        $('div.modal').modal('hide')
                    })
                }
                const playlistStreamSave = function () {
                    let data = {
                        name: $('div.modal input[name=playlistStreamName]').val(),
                        epgChannelId: $('div.modal input[name=playlistStreamEpgId]').val(),
                        icon: $('div.modal input[name=playlistStreamIcon]').val(),
                    }
                    axios.put('/manager/api/playlist/live/' + $('#playlistList option:selected').val() + '/category/' + $('#playlistCategoryList div.active').attr('category-id') + '/stream/' + $('div.modal input[name=id]').val(), data).then(function () {
                        playlistStreamUpdate()
                        $('div.modal').modal('hide')
                    })
                }
                // EPG
                let epgList = []
                const epgUpdate = function () {
                    axios.get('/manager/api/epg', {
                        responseType: 'json'
                    }).then(function (epgs) {
                        epgList = epgs.data
                        let template = Handlebars.compile($('#EPGList-template').html())
                        let html = template({
                            epg: epgs.data
                        })
                        $('#epgContent').html(html)
                        $('.epgButtonDisable').each(function () {
                            $(this).on('click', function () {
                                axios.put('/manager/api/epg/' + $(this).attr('epg-id'), {
                                    status: false
                                }).then(function () {
                                    epgUpdate()
                                })
                            })
                        })
                        $('.epgButtonEnable').each(function () {
                            $(this).on('click', function () {
                                axios.put('/manager/api/epg/' + $(this).attr('epg-id'), {
                                    status: true
                                }).then(function () {
                                    epgUpdate()
                                })
                            })
                        })
                        $('.epgButtonUpdate').each(function() {
                            $(this).on('click', function () {
                                let epgName = $(this).attr('epg-name')
                                toastGenerator('EPG', epgName + ' update started', TOAST_STATUS.INFO, 5000);
                                axios.get('/manager/api/epg/' + $(this).attr('epg-id') + '/update').then(function () {
                                    toastGenerator('EPG', epgName + ' update finished', TOAST_STATUS.SUCCESS, 5000);
                                    epgUpdate()
                                })
                            })
                        })
                        $('.epgButtonClear').each(function() {
                            $(this).on('click', function () {
                                let epgId = $(this).attr('epg-id')
                                let epgName = $(this).attr('epg-name')
                                bootbox.dialog({
                                    title: 'EPG: erase programs',
                                    message: 'Confirm programs deletion of ' + epgName,
                                    onEscape: true,
                                    backdrop: true,
                                    buttons: {
                                        cancel: {
                                            label: 'Cancel',
                                            class: 'btn-default',
                                            callback: function () {}
                                        },
                                        clear: {
                                            label: 'Clear',
                                            class: 'btn-danger',
                                            callback: function () {
                                                toastGenerator('EPG', epgName + ' delete started', TOAST_STATUS.INFO, 5000);
                                                axios.delete('/manager/api/epg/' + epgId).then(function () {
                                                    epgUpdate()
                                                    toastGenerator('EPG', epgName + ' delete finished', TOAST_STATUS.SUCCESS, 5000);
                                                    bootbox.hideAll()
                                                })
                                            }
                                        }
                                    }
                                })
                            })
                        })
                        $('.epgUpdateTime').each(function() {
                            let that = this
                            $(this).mask('00:00')
                            $(this).keyup(delayInput(function () {
                                axios.put('/manager/api/epg/' + $(that).attr('epg-id'), {
                                    updateTime: $(that).val()
                                }).then(function () {
                                    epgUpdate()
                                })
                            }, 1000))
                        })
                    })
                }
                epgUpdate()
                // Page
                const changePage = function () {
                    $('nav a').removeClass("active")
                    switch (window.location.hash) {
                        case '#epg':
                            $('#nav-epg').addClass("active")
                            let epgTemplate = Handlebars.compile($('#page-epg-template').html())
                            $('#page').html(epgTemplate())
                            epgUpdate()
                            break
                        case '#playlist':
                        default:
                            $('#nav-playlist').addClass("active")
                            let playlistTemplate = Handlebars.compile($('#page-playlist-template').html())
                            $('#page').html(playlistTemplate())
                            providerUpdate()
                            playlistUpdate()
                            break
                    }
                }
                $(window).on('hashchange', function () {
                    changePage()
                })
                // Functions
                const delayInput = function (callback, ms) {
                    let timer = 0
                    return function () {
                        let context = this, args = arguments
                        clearTimeout(timer)
                        timer = setTimeout(function () {
                            callback.apply(context, args)
                        }, ms || 0)
                    }
                }
                changePage()
            })
        </script>
        <!-- Page templates -->
        <script id="page-playlist-template" type="text/x-handlebars-template">
                <div class="row">
                    <div class="col-xl-3 col-lg-3 col-md-4">
                        <div class="row">
                            <div class="col">
                                <div class="form-group" id="providerPanel"></div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <div class="form-group" id="providerCategoryPanel"></div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <div class="panel" id="providerStreamPanel"></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-xl-9 col-lg-9 col-md-8">
                        <div class="row">
                            <div class="col">
                                <div class="form-group" id="playlistPanel"></div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-xl-3 col-lg-4 col-4">
                                <div class="panel" id="playlistCategoryPanel"></div>
                            </div>
                            <div class="col-xl-9 col-lg-8 col-8">
                                <div class="panel" id="playlistStreamPanel"></div>
                            </div>
                        </div>
                    </div>
                </div>
        </script>
        <script id="page-epg-template" type="text/x-handlebars-template">
            <div class="row">
                <div class="col-12" id="epgContent"></div>
            </div>
        </script>
        <!-- EPG templates -->
        <script id="EPGList-template" type="text/x-handlebars-template">
            <h2>EPG list</h2>
            <table class="table table-sm table-hover">
                <thead class="thead-dark">
                    <tr>
                        <th scope="col">Name</th>
                        <th scope="col"># Channels</th>
                        <th scope="col">First program</th>
                        <th scope="col">Last program</th>
                        <th scope="col">Update hour</th>
                        <th scope="col">Last update</th>
                        <th scope="col">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    \{{#each epg}}
                    <tr \{{#unless status}} class="table-dark" \{{/unless}}>
                        <td>\{{name}}</td>
                        <td>\{{channels}}</td>
                        <td>\{{min}}</td>
                        <td>\{{max}}</td>
                        <td>
                           <input type="text" class="w-25 form-control form-control-sm epgUpdateTime" epg-id="\{{id}}" value="\{{updateTime}}">
                        </td>
                        <td>
                            \{{lastScan}}
                        </td>
                        <td>
                            \{{#if status}}<button type="button" class="btn btn-secondary btn-sm epgButtonDisable" epg-id="\{{id}}">Disable</button>
                            \{{else}}<button type="button" class="btn btn-success btn-sm epgButtonEnable" epg-id="\{{id}}">Enable</button>
                            \{{/if}}
                            <button class="btn btn-sm btn-primary epgButtonUpdate" epg-id="\{{id}}" epg-name="\{{name}}">Update</button>
                            <button class="btn btn-sm btn-danger epgButtonClear" epg-id="\{{id}}" epg-name="\{{name}}">Clear</button>
                            </td>
                    </tr>
                    \{{/each}}
                </tbody>
              </table>
        </script>
        <!-- Provider templates -->
        <script id="providerList-template" type="text/x-handlebars-template">
            <h5>Provider <small><i class="fa fa-plus-square" id="providerAdd" title="Add provider"></i> <i class="fa fa-sync" id="providerSync" title="Update provider's categories/streams"></i> <i class="fa fa-pencil-alt" id="providerEdit" title="Edit provider"></i> <i class="fa fa-trash" id="providerDelete" title="Delete provider"></i></small></h5>
            <select id="providerList" class="form-control">
                \{{#each provider}}
                <option value="\{{id}}" \{{{isSelected id ../providerSelected}}}>\{{this.name}}</option>
                \{{/each}}
            </select>
        </script>
        <script id="providerCategory-template" type="text/x-handlebars-template">
            <label for="providerCategory"><h6>Category</h6></label>
            <select id="providerCategory" class="form-control">
                \{{#each category}}
                <option value="\{{id}}">\{{name}}</option>
                \{{/each}}
            </select>
        </script>
        <script id="providerStream-template" type="text/x-handlebars-template">
            <div class="panel-heading"><h6>Stream</h6></div>
            <div class="panel-body">
                <div class="form-group">
                    <input class="form-control" id="providerStreamFilter" type="search" placeholder="Stream filter">
                </div>
                <div id="providerStream" class="list-group">
                    <p class="text-muted">Double click to copy stream</p>
                    <p><button class="btn btn-success" id="copyLiveStreamToPlaylistCategory">Copy all streams</button></p>
                    <div class="row">
                        <div class="col">
                            \{{#each stream}}
                    <div class="list-group-item justify-content-between align-items-center" stream-id="\{{id}}">
                        <span id="name">\{{name}}</span>
                        \{{#if archiveDuration}}
                        <span class="float-right">
                            <small><i class="fas fa-history" title="Catchup duration \{{archiveDuration}} days"></i> \{{archiveDuration}} days</small>
                        </span>
                        \{{/if}}
                    </div>
                    \{{/each}}
                        </div>
                    </div>
                    
                </div>
            </div>
        </script>
        <script id="providerModalAdd-template" type="text/x-handlebars-template">
            <div class="modal-header">
                <h5 class="modal-title">Add provider</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-group">
                        <label for="providerName">Name</label>
                        <input class="form-control" type="text" name="providerName">
                        <label for="providerHost">Host</label>
                        <input class="form-control" type="text" name="providerHost" placeholder="Without scheme, only domain or IP">
                        <label for="providerPort">Port</label>
                        <input class="form-control" type="text" name="providerPort">
                        <label for="providerUsername">Username</label>
                        <input class="form-control" type="text" name="providerUsername">
                        <label for="providerPassword">Password</label>
                        <input class="form-control" type="text" name="providerPassword">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" id="providerAddButton">Add</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </script>
        <script id="providerModalEdit-template" type="text/x-handlebars-template">
            <div class="modal-header">
                <h5 class="modal-title">Edit provider \{{provider.name}}</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-group">
                        <label for="providerName">Name</label>
                        <input class="form-control" type="text" name="providerName" value="\{{provider.name}}">
                        <label for="providerHost">Host</label>
                        <input class="form-control" type="text" name="providerHost" placeholder="Without scheme, only domain or IP" value="\{{provider.host}}">
                        <label for="providerPort">Port</label>
                        <input class="form-control" type="text" name="providerPort" value="\{{provider.port}}">
                        <label for="providerUsername">Username</label>
                        <input class="form-control" type="text" name="providerUsername" value="\{{provider.username}}">
                        <label for="providerPassword">Password</label>
                        <input class="form-control" type="text" name="providerPassword" value="\{{provider.password}}">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" id="providerSaveButton">Save</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </script>
        <!-- Playlist templates -->
        <script id="playlistList-template" type="text/x-handlebars-template">
            <h5>Playlist <small><i class="fa fa-plus-square" id="playlistAdd" title="Add playlist"></i> <i class="fa fa-pencil-alt" id="playlistEdit" title="Edit playlist"></i> <i class="fa fa-trash" id="playlistDelete" title="Delete playlist"></i> <i class="fa fa-info" id="playlistInfo" title="Display playlist informations"></i></small></h5>
            <select id="playlistList" class="form-control">
                \{{#each playlist}}
                <option value="\{{id}}" \{{{isSelected id ../playlistSelected}}}>\{{name}}</option>
                \{{/each}}
            </select>
        </script>
        <script id="playlistCategory-template" type="text/x-handlebars-template">
            <div class="panel-heading">
                <h5>Category <small><i class="fa fa-plus-square" id="playlistCategoryAdd" title="Add playlist category"></i> <span id="playlistCategoryAction"><i class="fa fa-pencil-alt" id="playlistCategoryEdit" title="Edit playlist category"></i> <i class="fa fa-trash" id="playlistCategoryDelete" title="Delete playlist category"></i></span></small></h5>
            </div>
            <div class="panel-body">
                <div class="list-group" id="playlistCategoryList">
                    \{{#each category}}
                    <div class="list-group-item \{{#if active}}active\{{/if}}" category-id="\{{id}}"><span class="fas fa-arrows-alt" aria-hidden="true"></span> \{{name}}</div>
                    \{{/each}}
                </div>
            </div>
        </script>
        <script id="playlistStream-template" type="text/x-handlebars-template">
            <div class="panel-heading">
                <h5>Stream(s) for selected category <small><i class="fa fa-file-signature" id="playlistStreamRename" title="Massive rename"></i> <i class="fas fa-list" id="playlistStreamStyleToogle" title="Change view"></i></small></h5>
            </div>
            <div class="panel-body">
                <div class="row" id="playlistStreamList">
                \{{#each stream}}
                    <div class="col-xl-3 col-lg-4 col-md-6 col-sm-6 col-12" stream-id="\{{id}}">
                        <div class="card">
                            <div class="card-header">
                                <div class="row">
                                    <div class="col-sm-6">
                                        <i class="fa fa-arrows-alt"></i>
                                    </div>
                                    <div class="col-sm-6 text-right">
                                        <span class="badge badge-pill badge-primary">\{{position}}</span>
                                    </div>
                                </div>
                            </div>
                            <div class="card-body" style="background-image: url('\{{icon}}');">
                                <div class="card-title text-center align-middle">\{{name}}\{{#if archiveDuration }}<br /><i class="fas fa-history" data-toggle="tooltip" data-html="true" title="Catchup duration \{{archiveDuration}} days"></i>\{{/if}}</div>
                            </div>
                            <div class="card-footer">
                                <div class="row">
                                    <div class="col-sm-6">
                                        <small>\{{provider}}</small>
                                    </div>
                                    <div class="col-sm-6 text-right">
                                        <small><i class="fa fa-pencil-alt playlistStreamEdit" title="Edit" id="playlistStreamEdit" stream-id="\{{id}}"></i> <i class="fas fa-info" data-toggle="tooltip" data-html="true" title="<p>Stream ID: \{{streamId}}<br>Stream name: \{{providerStreamName}}<br>Category: \{{providerCategory}}</p>" stream-id="\{{id}}"></i> <i class="fa fa-trash playlistStreamDelete" title="Delete" id="playlistStreamDelete" stream-id="\{{id}}"></i></small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                \{{/each}}
                </div>
            </div>
        </script>
        <script id="playlistStream-inline-template" type="text/x-handlebars-template">
            <div class="panel-heading">
                <h5>Stream(s) for selected category <small><i class="fa fa-file-signature" id="playlistStreamRename" title="Massive rename"></i> <i class="fas fa-th" id="playlistStreamStyleToogle" title="Change view"></i></small></h5>
            </div>
            <div class="panel-body">
                <div class="row" id="playlistStreamList">
                \{{#each stream}}
                    <div class="col-12 mb-1" stream-id="\{{id}}">
                        <div>
                            <i class="fa fa-arrows-alt mr-2"></i>\{{providerStreamName}}\{{#if archiveDuration }} <i class="fas fa-history" data-toggle="tooltip" data-html="true" title="Catchup duration \{{archiveDuration}} days"></i>\{{/if}}
                            <span class="float-right">
                                <small>\{{provider}}</small> <i class="fa fa-trash playlistStreamDelete" title="Delete" id="playlistStreamDelete" stream-id="\{{id}}"></i>
                            </span>
                        </div>
                        <div class="row form-group">
                            <div class="col-3">
                                <input type="text" name="name" class="form-control form-control-sm" placeholder="Channel name" value="\{{customName}}" stream-id="\{{id}}">
                            </div>
                            <div class="col-3">
                                <input type="text" name="epgid" class="form-control form-control-sm\{{#if epgAvailable}} is-valid\{{else}} is-invalid\{{/if}}" placeholder="EPG ID" value="\{{customEpgChannelId}}" stream-id="\{{id}}">
                                \{{#if epgAvailable}}
                                <div class="valid-feedback">EPG available</div>
                                \{{else}}
                                <div class="invalid-feedback">EPG not available</div>
                                \{{/if}}
                            </div>
                            <div class="col-6">
                                <input type="text" name="icon" class="form-control form-control-sm" placeholder="Logo URL" value="\{{customIcon}}" stream-id="\{{id}}">
                            </div>
                        </div>
                    </div>
                \{{/each}}
                </div>
            </div>
        </script>
        <script id="playlistModalAdd-template" type="text/x-handlebars-template">
            <div class="modal-header">
                <h5 class="modal-title">Add playlist</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-group">
                        <label for="playlistName">Name</label>
                        <input class="form-control" type="text" name="playlistName">
                        <label for="playlistPassword">Password</label>
                        <div class="input-group mb-2">
                            <div class="input-group-prepend">
                                <div class="input-group-text"><i class="fas fa-key" onclick="$('div.modal input[name=playlistPassword]').val(Math.random().toString(36).slice(-10))" title="Generate password"></i></div>
                            </div>
                            <input class="form-control" type="text" name="playlistPassword" value="\{{playlist.password}}">
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="playlistEpgProvider">EPG</label>
                        <table class="table table-sm">
                            <thead>
                              <tr>
                                <th scope="col">EPG name</th>
                                <th scope="col">Priority weight</th>
                              </tr>
                            </thead>
                            <tbody>
                        \{{#each epg}}
                                <tr>
                                    <td class="align-middle">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" value="\{{id}}" name="epg[]" id="check\{{this.name}}">
                                            <label class="form-check-label" for="check\{{this.name}}">\{{this.name}}</label>
                                        </div>
                                    </td>
                                    <td class="align-middle"><input class="form-control form-control-sm" type="text" id="priority\{{this.id}}" size="2" value="0"></td>
                                </tr>
                        \{{/each}}
                            </tbody>
                        </table>
                        <small>Used to generate XLMTV EPG for your playlists streams</small>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" id="playlistAddButton">Add</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </script>
        <script id="playlistModalEdit-template" type="text/x-handlebars-template">
            <div class="modal-header">
                <h5 class="modal-title">Edit playlist \{{playlist.name}}</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-group">
                        <label for="playlistName">Name</label>
                        <input class="form-control" type="text" name="playlistName" value="\{{playlist.name}}">
                        <label for="playlistPassword">Password</label>
                        <div class="input-group mb-2">
                            <div class="input-group-prepend">
                                <div class="input-group-text"><i class="fas fa-key" onclick="$('div.modal input[name=playlistPassword]').val(Math.random().toString(36).slice(-10))" title="Generate password"></i></div>
                            </div>
                            <input class="form-control" type="text" name="playlistPassword" value="\{{playlist.password}}">
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="playlistEpgProvider">EPG</label>
                        <table class="table table-sm">
                            <thead>
                              <tr>
                                <th scope="col">EPG name</th>
                                <th scope="col">Priority weight</th>
                              </tr>
                            </thead>
                            <tbody>
                        \{{#each epg}}
                                <tr>
                                    <td class="align-middle">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" value="\{{id}}" name="epg[]" id="check\{{this.name}}" \{{{isChecked id ../playlist.Epgs}}}>
                                            <label class="form-check-label" for="check\{{this.name}}">\{{this.name}}</label>
                                        </div>
                                    </td>
                                    <td class="align-middle"><input class="form-control form-control-sm" type="text" id="priority\{{this.id}}" size="2" value="\{{{getPriority id ../playlist.Epgs}}}"></td>
                                </tr>
                        \{{/each}}
                            </tbody>
                        </table>
                        <small>Used to generate XLMTV EPG for your playlists streams</small>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" id="playlistSaveButton">Save</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </script>
        <script id="playlistModalInfos-template" type="text/x-handlebars-template">
            <div class="modal-header">
                <h5 class="modal-title">Playlist \{{playlist.name}} informations</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h5>API Xtream Codes access :</h5>
                <p>Host: \{{baseUrl}}<br />Username: \{{playlist.id}}<br />Password: \{{playlist.password}}</p>
                <h5>EPG URL:</h5>
                <p><a href="\{{baseUrl}}/xmltv.php?username=\{{playlist.id}}&password=\{{playlist.password}}" target="_blank">\{{baseUrl}}/xmltv.php?username=\{{playlist.id}}&password=\{{playlist.password}}</a></p>
                <h5>Download M3U playlist</h5>
                <p><a href="\{{baseUrl}}/get.php?username=\{{playlist.id}}&password=\{{playlist.password}}">\{{baseUrl}}/get.php?username=\{{playlist.id}}&password=\{{playlist.password}}</a></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </script>
        <script id="playlistCategoryModalAdd-template" type="text/x-handlebars-template">
            <div class="modal-header">
                <h5 class="modal-title">Add playlist category</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-group">
                        <label for="playlistCategoryName">Name</label>
                        <input class="form-control" type="text" name="playlistCategoryName">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" id="playlistCategoryAddButton">Add</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </script>
        <script id="playlistCategoryModalEdit-template" type="text/x-handlebars-template">
            <div class="modal-header">
                <h5 class="modal-title">Edit playlist category \{{playlistCategory.name}}</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-group">
                        <label for="playlistCategoryName">Name</label>
                        <input class="form-control" type="text" name="playlistCategoryName" value="\{{playlistCategory.name}}">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="submit" class="btn btn-primary" id="playlistCategorySaveButton">Save</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </script>
        <script id="playlistStreamModalEdit-template" type="text/x-handlebars-template">
            <div class="modal-header">
                <h5 class="modal-title">Edit stream</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <input type="hidden" name="id" value="\{{playlistStream.id}}">
                    <p>Provider: \{{playlistStream.LiveStream.Provider.name}}</p>
                    <div class="form-group">
                        <label for="playlistStreamName">Name</label>
                        <input class="form-control" type="text" id="playlistStreamName" name="playlistStreamName" value="\{{playlistStream.name}}" placeholder="\{{playlistStream.LiveStream.name}}">
                        <small id="playlistStreamNameHelp" class="form-text text-muted">Original name: \{{playlistStream.LiveStream.name}}</small>
                    </div>
                    <div class="form-group">
                        <label for="playlistStreamEpgId">EPG id</label>
                        <input class="form-control" type="text" id="playlistStreamEpgId" name="playlistStreamEpgId" value="\{{playlistStream.epgChannelId}}" placeholder="\{{playlistStream.LiveStream.epgChannelId}}">
                        <small id="playlistStreamEpgIdHelp" class="form-text text-muted">Original EPG ID: \{{playlistStream.LiveStream.epgChannelId}}</small>
                    </div>
                    <div class="form-group">
                        <label for="playlistStreamIcon">Icon url</label>
                        <input class="form-control" type="text" id="playlistStreamIcon" name="playlistStreamIcon" value="\{{playlistStream.icon}}" placeholder="\{{playlistStream.LiveStream.icon}}">
                        <small id="playlistStreamIconHelp" class="form-text text-muted">Original icon: <a href="\{{playlistStream.LiveStream.icon}}" target="_blank">\{{playlistStream.LiveStream.icon}}</a></small>
                        \{{#if playlistStream.icon}}<small id="playlistStreamIconHelp" class="form-text text-muted">Custom icon: <a href="\{{playlistStream.icon}}" target="_blank">\{{playlistStream.icon}}</a></small>\{{/if}}
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="submit" class="btn btn-primary" id="playlistStreamSaveButton">Save</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </script>
        <script id="playlistStreamModalRename-template" type="text/x-handlebars-template">
            <div class="modal-header">
                <h5 class="modal-title">Massive rename stream name</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-group">
                        <label for="playlistStreamRenameSearch">Search</label>
                        <input class="form-control" type="text" id="playlistStreamRenameSearch" name="playlistStreamRenameSearch" value="" placeholder="Search characters">
                    </div>
                    <div class="form-group">
                        <label for="playlistStreamRenameReplace">Replace</label>
                        <input class="form-control" type="text" id="playlistStreamRenameReplace" name="playlistStreamRenameReplace" value="" placeholder="Replace characters">
                    </div>
                    <div class="form-group">
                        <label for="playlistStreamRenameResult">Results</label>
                        <textarea class="form-control" name="playlistStreamRenameResult" rows="10"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="submit" class="btn btn-primary" id="playlistStreamRenameSaveButton">Update</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </script>
    </body>
</html>